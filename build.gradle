plugins {
    id "java"
    id "checkstyle"
    id "maven-publish"
    id "eclipse"
    id "idea"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "com.github.hierynomus.license" version "0.15.0"
}

// Default tasks
defaultTasks 'licenseFormat', 'check', 'build'

// Basic project information
group = 'website.zeb'
archivesBaseName = 'sponge-mixin'
version = buildVersion

def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
    version = version + "." + "${ENV.BUILD_NUMBER}"
}

// Extended project information
ext.projectName = 'Mixin'
ext.inceptionYear = '2014'
ext.packaging = 'jar'

// Define variables
ext.buildNumber = project.hasProperty("buildNumber") ? buildNumber : '0'
ext.ciSystem = project.hasProperty("ciSystem") ? ciSystem : 'unknown'
ext.commit = project.hasProperty("commit") ? commit : 'unknown'

// Location to store renamed packages
ext.renamedPackageRoot = new File("build/renamed-packages/")

// True to do jar signing task
ext.doSignJar = project.hasProperty("keyStorePath")

// Minimum version of Java required
sourceCompatibility = '1.6'
targetCompatibility = '1.6'

// Project repositories
repositories {
    mavenCentral()
    maven {
        name = 'minecraft'
        url = 'https://libraries.minecraft.net/'
    }
    maven {
        name = 'renamed-packages'
        url = file(renamedPackageRoot)
    }
    maven {
        name = 'Fabric'
        url = 'http://maven.fabricmc.net/'
    }
}

configurations {
    deployerJars // maven stuff
    asm // renamer input
    jarjar // renamer task
    
    // Exclude non-repackaged ASM so that we don't use it by mistake
    compile.exclude module: 'asm'
    compile.exclude module: 'asm-analysis'
    compile.exclude module: 'asm-commons'
    compile.exclude module: 'asm-tree'
    compile.exclude module: 'asm-util'
}

// Include annotation processor sourceSet
sourceSets {
    ap {
        compileClasspath += main.output
    }
    fernflower {
        compileClasspath += main.output
    }
    agent {
        compileClasspath += main.output
    }
    bridge {
        compileClasspath += main.output
    }
    example {
        compileClasspath += main.output
        compileClasspath += ap.output
    }
    launchwrapper {
        compileClasspath += main.output
    }
}

// Dependencies for renamed ASM
dependencies {
    asm 'org.ow2.asm:asm:7.1'
    asm 'org.ow2.asm:asm-analysis:7.1'
    asm 'org.ow2.asm:asm-commons:7.1'
    asm 'org.ow2.asm:asm-tree:7.1'
    asm 'org.ow2.asm:asm-util:7.1'
    jarjar 'com.googlecode.jarjar:jarjar:1.1'
}

// Task to read ASM library and rename packages
task renamedASM {
    def indexMap = [:]
    outputs.file files(configurations.asm.files.sort { it.name }.withIndex().collect { file, i -> def dep = configurations.asm.dependencies.find { dep -> file.name == dep.name + "-" + dep.version + ".jar" }
        indexMap["mixin-" + file.name] = i
        new File(new File(renamedPackageRoot, "org/spongepowered/mixin-" + dep.name + "/" + dep.version), "mixin-" + file.name).path
    })
    ant {
        taskdef (
            name: "jarjar",
            classname: "com.tonicsystems.jarjar.JarJarTask",
            classpath: configurations.jarjar.asPath,
        )
        outputs.files.eachWithIndex { elem, _ ->
            def index = indexMap[elem.name]
            logger.info "Generating renamed jar {}", elem.name
            def inJar = configurations.asm.files[index]
            if (elem.name.contains("sources")) {
                def tmpDir = new File(temporaryDir, elem.name + ".tmp")
                def rootOld = new File(tmpDir, "org/objectweb")
                def tmpOld = new File(rootOld, "asm")
                def tmpNew = new File(tmpDir, "org/spongepowered/asm/lib")
                unzip (src: inJar, dest: tmpDir)
                replace (dir: tmpDir, token: "org.objectweb.asm", value: "org.spongepowered.asm.lib")
                move (file: tmpOld, tofile: tmpNew)
                delete rootOld
                jar (destFile: new File(elem.path)) { fileset(dir: tmpDir) }
                delete tmpDir
            } else {
                jarjar (jarfile: elem.path) {
                    zipfileset (src: inJar)
                    rule (
                        pattern: "org.objectweb.asm.**",
                        result: "org.spongepowered.asm.lib.@1"
                    )
                }
            }
        }
    }
    
    project.dependencies.add('compile', 'org.spongepowered:mixin-asm:7.1')
    project.dependencies.add('compile', 'org.spongepowered:mixin-asm-analysis:7.1')
    project.dependencies.add('compile', 'org.spongepowered:mixin-asm-commons:7.1')
    project.dependencies.add('compile', 'org.spongepowered:mixin-asm-tree:7.1')
    project.dependencies.add('compile', 'org.spongepowered:mixin-asm-util:7.1')
    project.dependencies.add('apCompile', 'org.spongepowered:mixin-asm:7.1')
    project.dependencies.add('apCompile', 'org.spongepowered:mixin-asm-analysis:7.1')
    project.dependencies.add('apCompile', 'org.spongepowered:mixin-asm-commons:7.1')
    project.dependencies.add('apCompile', 'org.spongepowered:mixin-asm-tree:7.1')
    project.dependencies.add('apCompile', 'org.spongepowered:mixin-asm-util:7.1')
    project.dependencies.add('agentCompile', 'org.spongepowered:mixin-asm:7.1')
    project.dependencies.add('agentCompile', 'org.spongepowered:mixin-asm-analysis:7.1')
    project.dependencies.add('agentCompile', 'org.spongepowered:mixin-asm-commons:7.1')
    project.dependencies.add('agentCompile', 'org.spongepowered:mixin-asm-tree:7.1')
    project.dependencies.add('agentCompile', 'org.spongepowered:mixin-asm-util:7.1')
}
compileJava.dependsOn(renamedASM)
eclipseClasspath.dependsOn(renamedASM)

// Project dependencies
dependencies {
    def guava = 'com.google.guava:guava:21.0'
    def log4j2 = 'org.apache.logging.log4j:log4j-core:2.8.1'
    
    compile guava
    compile log4j2
    compile 'commons-io:commons-io:2.5'
    compile 'com.google.code.gson:gson:2.8.0'
    compile files(tasks.renamedASM.outputs.files[0])         // Establish implicit dependency on remapped ASM

    // Tests
//    testCompile 'junit:junit:4.11'
//    testCompile 'org.hamcrest:hamcrest-library:1.3'
//    testCompile 'org.mockito:mockito-core:1.9.0'
    
    // Annotation Processor
    apCompile guava
    
    // AP extension example
    exampleCompile configurations.compile

    // Maven FTP
    deployerJars 'org.apache.maven.wagon:wagon-ftp:2.7'

    // Fernflower decompiler
    fernflowerCompile configurations.compile
    fernflowerCompile 'org.jetbrains:intellij-fernflower:1.0.0.8'

    // LegacyLauncher service
    launchwrapperCompile configurations.compile
    launchwrapperCompile('net.minecraft:launchwrapper:1.12') {
        transitive = false
    }
    
    // agent
    agentCompile configurations.compile
    
    // asm bridge
    bridgeCompile log4j2
    bridgeCompile 'org.ow2.asm:asm-commons:7.1'
}

// Eclipse
eclipse.classpath.plusConfigurations += [
    configurations.fernflowerCompile,
    configurations.launchwrapperCompile,
    configurations.bridgeCompile
]

// IntelliJ
idea.module.scopes.COMPILE.plus += [
    configurations.fernflowerCompile,
    configurations.launchwrapperCompile,
    configurations.bridgeCompile
]

// Filter, process, and include resources
processResources {
    // Include in final JAR
   from 'LICENSE.txt'
}

javadoc {
    options.encoding = 'UTF-8'
}

// License header formatting
license {
    ext {
        name = project.name
        organization = project.organization
        url = project.url
    }
    include '**/*.java'
    header file("HEADER.txt")
    sourceSets = project.sourceSets
    ignoreFailures false
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

checkstyle {
    configProperties = [
        "name"        : project.name,
        "organization": project.organization,
        "url"         : project.url,
        "year"        : project.inceptionYear
    ]
    configFile = file("checkstyle.xml")
    toolVersion = '8.10'
}

// Source compiler configuration
tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-path']
    options.deprecation = true
    options.encoding = 'utf8'
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

jar {
    // Include annotation processor
    from sourceSets.ap.output
    
    // Include fernflower bridge
    from sourceSets.fernflower.output

    // Include hotswap agent
    from sourceSets.agent.output
    
    // Bridge
    from sourceSets.bridge.output
    
    // Launchwrapper - no longer used - provided by Knot in Fabric!
    from sourceSets.launchwrapper.output
    
    // Renamed ASM
    from zipTree(tasks.renamedASM.outputs.files.sort { it.name }[0]).matching {
        include 'org/spongepowered/asm/lib/**'
    }
    from zipTree(tasks.renamedASM.outputs.files.sort { it.name }[1]).matching {
        include 'org/spongepowered/asm/lib/**'
    }
    from zipTree(tasks.renamedASM.outputs.files.sort { it.name }[2]).matching {
        include 'org/spongepowered/asm/lib/commons/*Remapper*'
        include 'org/spongepowered/asm/lib/commons/Remapper*'
        include 'org/spongepowered/asm/lib/commons/SignatureRemapper*'
        include 'org/spongepowered/asm/lib/tree/analysis/**'
    }
    from zipTree(tasks.renamedASM.outputs.files.sort { it.name }[3]).matching {
        include 'org/spongepowered/asm/lib/**'
    }
    from zipTree(tasks.renamedASM.outputs.files.sort { it.name }[4]).matching {
        include 'org/spongepowered/asm/lib/**'
    }
    
    exclude 'org/objectweb/**'
    
    // JAR manifest configuration
    manifest.mainAttributes(
        "Built-By": System.properties['user.name'],
        "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        "Implementation-Title": name,
        "Implementation-Version": version + "+" + ciSystem + "-b" + buildNumber + ".git-" + commit,
        "Implementation-Vendor": url,
        // for hotswap agent
        "Premain-Class": "org.spongepowered.tools.agent.MixinAgent",
        "Agent-Class": "org.spongepowered.tools.agent.MixinAgent",
        "Can-Redefine-Classes": true,
        "Can-Retransform-Classes": true
    )

    if (project.doSignJar) {
        classifier = 'unsigned'
    }
}

task thinJar(type: Jar) {
    from sourceSets.main.output

    from zipTree(tasks.renamedASM.outputs.files.sort { it.name }[0]).matching {
        include 'org/spongepowered/asm/lib/**'
    }
    from zipTree(tasks.renamedASM.outputs.files.sort { it.name }[1]).matching {
        include 'org/spongepowered/asm/lib/**'
    }
    from zipTree(tasks.renamedASM.outputs.files.sort { it.name }[2]).matching {
        include 'org/spongepowered/asm/lib/commons/*Remapper*'
        include 'org/spongepowered/asm/lib/commons/Remapper*'
        include 'org/spongepowered/asm/lib/commons/SignatureRemapper*'
        include 'org/spongepowered/asm/lib/tree/analysis/**'
    }
    from zipTree(tasks.renamedASM.outputs.files.sort { it.name }[3]).matching {
        include 'org/spongepowered/asm/lib/**'
    }
    from zipTree(tasks.renamedASM.outputs.files.sort { it.name }[4]).matching {
        include 'org/spongepowered/asm/lib/**'
    }

    baseName = 'sponge-mixin-runtime'
    classifier = ''

    manifest.mainAttributes(
        "Built-By": System.properties['user.name'],
        "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        "Implementation-Title": name,
        "Implementation-Version": version + "+" + ciSystem + "-b" + buildNumber + ".git-" + commit,
        "Implementation-Vendor": url,
    )
}
build.dependsOn(thinJar)

// generate shadow jar so we can use the AP standalone
shadowJar  {
    from sourceSets.ap.output
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    dependencies {
        include(dependency('com.google.guava:guava'))
        include(dependency('com.google.code.gson:gson'))
        include(dependency('commons-io:commons-io'))
        include(dependency('org.apache.logging.log4j:log4j-core'))
        include(dependency('org.apache.logging.log4j:log4j-api'))
    }
    classifier = 'processor'
}
// build.dependsOn(shadowJar)

if (project.doSignJar) {
    // Clear artifacts because jar will be there by default
    configurations.archives.artifacts.clear()

    // Define signjar task    
    task signJar() {
        inputs.files(jar.outputs)
        outputs.file jar.outputs.files.collect {
            new File(it.parent, it.name.replace('-unsigned', ''))
        }
        doLast {
            jar.outputs.files.each {
                ant.signjar(
                    alias: project.keyStoreCert,
                    jar: it,
                    signedJar: new File(it.parent, it.name.replace('-unsigned', '')),
                    keystore: project.keyStorePath,
                    storepass: project.keyStoreSecret,
                    keypass: project.keyStoreSecret,
                    tsaurl: project.timestampAuthority,
                    preservelastmodified: 'true'
                )
            }
        }
    }
    build.dependsOn(signJar)
}

// Run this task instead of build to generate a timestamped shadow jar (for dev)
task timestamp(type: Jar, dependsOn: build) {
    if (gradle.startParameter.taskNames.contains(name)) {
        shadowJar.classifier = new Date().format('yyyyMMddHHmmss')
    }
}

task sourceJar(type: Jar) {
	from sourceSets.main.java
	from sourceSets.main.resources
	from sourceSets.ap.java
	from sourceSets.ap.resources
	from sourceSets.fernflower.java
	from sourceSets.fernflower.resources
    from sourceSets.agent.java
    from sourceSets.agent.resources
    from sourceSets.bridge.java
    from sourceSets.bridge.resources
    from sourceSets.example.java
    from sourceSets.example.resources
	classifier = "sources"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	from javadoc.destinationDir
	classifier = "javadoc"
}

artifacts {
    if (project.doSignJar) {
        archives signJar.outputs.files[0]
    }
    archives thinJar
    archives sourceJar
    archives javadocJar
}

ext.excludePomDeps = [
    'fernflower',
    'jarjar',
    'hamcrest-library',
    'junit',
    'mockito-core',
    'mixin-asm',
    'mixin-asm-analysis',
    'mixin-asm-commons',
    'mixin-asm-tree',
    'mixin-asm-util',
    'log4j-core'
]

publishing {
    publications {
        developer(MavenPublication) { publication ->
            groupId project.group
            artifactId project.archivesBaseName
            version project.version

            artifact jar
            artifact sourceJar
            artifact javadocJar

            // https://issues.gradle.org/browse/GRADLE-2966
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.runtime.allDependencies.each {
                    if (it.group != null && it.name != null && !excludePomDeps.contains(it.name)) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)

                        if (it.excludeRules.size() > 0) {
                            def exclusionsNode = dependencyNode.appendNode('exclusions')
                            it.excludeRules.each { rule ->
                                def exclusionNode = exclusionsNode.appendNode('exclusion')
                                exclusionNode.appendNode('groupId', rule.group)
                                exclusionNode.appendNode('artifactId', rule.module)
                            }
                        }
                    }
                }
            }
        }

        runtime(MavenPublication) { publication ->
            groupId project.group
            artifactId "sponge-mixin-runtime"
            version project.version

            artifact thinJar

            // https://issues.gradle.org/browse/GRADLE-2966
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.runtime.allDependencies.each {
                    if (it.group != null && it.name != null && !excludePomDeps.contains(it.name)) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)

                        if (it.excludeRules.size() > 0) {
                            def exclusionsNode = dependencyNode.appendNode('exclusions')
                            it.excludeRules.each { rule ->
                                def exclusionNode = exclusionsNode.appendNode('exclusion')
                                exclusionNode.appendNode('groupId', rule.group)
                                exclusionNode.appendNode('artifactId', rule.module)
                            }
                        }
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url "http://mavenupload.modmuss50.me/"
            if (project.hasProperty('mavenPass')) {
                credentials {
                    username 'buildslave'
                    password project.getProperty('mavenPass')
                }
            }
        }
    }
}
